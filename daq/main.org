#+TITLE: The KOALA experiment for (anti)proton-proton elastic scattering
#+OPTIONS: ^:nil
#+LATEX_HEADER: \usepackage{endnotes}
#+LATEX_HEADER: \renewcommand{\footnote}{\endnote}
#+LATEX_HEADER: \renewcommand{\notesname}{References}

#+TOC: Table of Content

* Introduction
* Principle of measurement and experiment setup
* Detector systems
** Recoil detector
** Forward detector
* Data acquisition system
   
  The data acquisition system (DAQ) of KOALA is a VME-based system.
  Mesytec [fn:mesytec] modules are used to digitize the amplitude, charge and time information.
  For the recoil detector, the amplitude signal after charge-integration amplifier and shaper is digitized by a peak-sensing ADC called MADC-32 [fn:madc32].
  MADC-32 has a 13-bit dynamic range with 6.4 $\mu s$ conversion time.
  For the forward detector, the pulses from PMT are directly fed into a QDC called MQDC-32 [fn:mqdc32] for charge measurement.
  MQDC-32 has a dynamic range of 500 pC and it uses a 12-bit ADC for digitization with 250 ns conversion time.
  The timing information from both the recoil and forward detectors are recorded by the same TDC called MTDC-32 [fn:mtdc32] using a conventional Start-Stop method.
  MTDC-32 has a minimum resolution of 5 ps.
  A multi-channel scalar called SIS3820 [fn:sis] is also integrated to measure the following key count rates: 1) count rates of all the four arms of the forward detector for 
  beam position monitoring; 2) count rates of the overlapping strips of the recoil detector for asymmetry correction; 3) count rates of the input trigger
  for DAQ efficiency correction.
  All the modules above have 32 measurement channels and can be hosted in one VME crate.
  The VME controller is SIS3100 from Struck Innovative [fn:sis].

  The acceptance of the forward detector only covers a small part of the recoil detector sensors.
  To record the elastic scattering events from the whole range of the recoil angle covered by the recoil detector, KOALA adopts a self-triggering schemde for the trigger logic design.
  Each sensor of the recoil detector and each arm of the forward detector works independently and generates their own trigger. 
  The trigger of the DAQ system is a common OR of the sub-detectors, as shown in Fig. [[fig:trigger_logic]].
  The trigger from the recoil detector sensor is generated by a coincidence between the front-side strips and the rear-side plane, 
  and the trigger from the forward detector arm is generated by a coincidence between the two layers in the same arm.
  In this way, the rate of the false hits generated by electronic noise can be minimized.
  Both elastic and inelastic scattering events are recorded in a selftriggering mode, and the coincidence between the recoil sensor and the forward detector is carried out in an offline analysis.
  
  #+CAPTION: Trigger Logic of the KOALA DAQ.
  #+NAME: fig:trigger_logic
  #+attr_latex: :width 320px
  [[./trigger_logic.png]]
  
  # An efficient readout mechanism is needed for self-triggered DAQ system.
  Fast readout of the recorded event is crucial for a self-triggered DAQ system.
  The asynchronous readout mechanism is adopted to increase the data throughput in KOALA.
  Each digitization module in the system has an on-board event buffer with a minimum size of 32 kB.
  The newly-digitized event is stored in this buffer before readout, so that the
  module is immediately ready for the digitization of the next event.
  The events in this buffer are not readout until the buffer is nearly full. In
  this way, the readout and the digitization is decoupled in order to minimize dead time of the module.
  Furthermore, VME CBLT transfer mode is utilized to minimize protocol overhead and in turn improve the readout speed.
  Since the hit rate is much higher at small recoil angles, the event buffer for these channels always saturates faster than others.
  Modules with a saturated event buffer will not record any new coming events before readout of the recorded events, while other modules are still able.
  This will bring a underestimated event counts in the region with smaller recoil angles.
  To solve this problem, the buffer-full flag signal from each digitization
  module is added to the trigger logic as a VETO as shown in Fig. [[fig:trigger_logic]].
  
  The issue about event synchronization arises naturally when using asynchronous readout.
  The digitization modules used in KOALA have different dead time, especially between MADC-32 and MTDC-32.
  An event recorded by a fast module may be missed by a slow module. This creates un-synchronous event structure, which makes the sequential event data assembling impossible. 
  KOALA DAQ uses timestamp-based synchronization to solve the problem.
  The modules in the system all have a 30-bit timestamp counter to record an input clock signal from the same source.
  The central clock source can be either the VME built-in clock of 16 MHz or an external clock to up 75 MHz.
  Currently, the built-in clock of VME backplane bus is used. 
  Based on this timestamp, event synchronization is achieved offline.
  An alternate option is to introduce a fixed-width mask signal into the trigger logic as VETO, as show in Fig. [[fig:trigger_logic]].
  The width of the mask signal should be larger than the largest dead time of all modules.
  In this way, the events are effectively synchronized sequentially. 
  However, this may also reduces DAQ efficiency significantly in a high hit-rate environment, which is not preferred.
  
  #+CAPTION: Design and deployment of KoalaEms. 
  #+NAME: fig:koalaems_deployment
  #+attr_latex: :width 220px
  [[./koalaems_deployment.png]]
  
  A dedicated DAQ software called KoalaEms is also developed for KOALA.
  KoalaEms is a fork of the EMS software [fn:ems], which is a highly flexible DAQ software framework developed for various experiments previously conducted at COSY.
  Support for the SIS3100 controller is integrated into KoalaEms and a new component of online monitoring based on ROOT is added.
  Also, outdated and unused components are updated and removed, respectively.
  The design of KoalaEms and the topology of deployment are shown in Fig. [[fig:koalaems_deployment]].
  The interface to DAQ is implemented as /sis3100_server/, the host PC of which has an optical link to the VME crate.
  The command and status information from/to the /daq_controller/ is mediated by a component called /commu/.
  The data flow from VME crate have two branches: 1) /data_out_disk/: save the raw data onto disk; 2) /data_out_stream/: stream out to /event_distributor/ for dispatching.
  /event_distributor/ will in turn forward the data stream to various consumption hosts for usages like online monitoring or online analysis.
  Both /commu/ and /event_distributor/ support socket connection and the /event_distributor/ also supports multiplexing streaming.
  Thus, all the square blocks in Fig. [[fig:koalaems_deployment]] can be hosted in different PCs and new consumer host to the data stream can be integrated when needed.

* * Software framework for simulation, calibration and analysis
* Calibration and energy reconstruction
* Results from beam test
* Conclusion and outlook

\clearpage

\theendnotes

[fn:mesytec] https://www.mesytec.com/ 
[fn:madc32] mesytec GmbH & Co. KG, MADC-32 User Guide
[fn:mtdc32] mesytec GmbH & Co. KG, MTDC-32 User Guide
[fn:mqdc32] mesytec GmbH & Co. KG, MQDC-32 User Guide
[fn:sis] https://www.struck.de/
[fn:ems] K. H. Watzlawik et al. IEEE Transactions on Nuclear Science 43 (1996): 44 
